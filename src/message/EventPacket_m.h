//
// Generated file, do not edit! Created by nedtool 5.2 from message/EventPacket.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __EVENTPACKET_M_H
#define __EVENTPACKET_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0502
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Struct generated from message/EventPacket.msg:21 by nedtool.
 */
struct NodeMessage
{
    NodeMessage();
    int nodeID;
    int capacity;
    int neighborNodeID[1024];
    int neighborCapacity[1024];
    int neighborNum;
    double transmission_rate[1024];
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const NodeMessage& a);
void __doUnpacking(omnetpp::cCommBuffer *b, NodeMessage& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NodeMessage& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NodeMessage& obj) { __doUnpacking(b, obj); }

/**
 * Struct generated from message/EventPacket.msg:34 by nedtool.
 */
struct Placement
{
    Placement();
    int placementNum;
    int OperatorGraphIndex[128];
    int operatorID[128];
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const Placement& a);
void __doUnpacking(omnetpp::cCommBuffer *b, Placement& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Placement& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Placement& obj) { __doUnpacking(b, obj); }

/**
 * Class generated from <tt>message/EventPacket.msg:41</tt> by nedtool.
 * <pre>
 * packet EventPacket
 * {
 *     bool placementMessage;
 *     Placement placement;
 * 
 *     NodeMessage fognode;
 *     int monitorID;
 *     bool monitorMessage;
 *     bool monitorFlag;
 *     int monitorH;
 * 
 *     bool used;
 *     string destAddrs;
 *     int srcAddr;
 *     int destAddr;
 *     int port;
 *     int appNum;
 * 
 * 
 *     int hopCount;
 * 
 *     bool markerMessage;
 *     double sendTime;
 *     double queueTime;
 *     double queueBeginTime;
 *     double transmissionTime;
 *     double transmissionBeginTime;
 *     double processTime;
 *     int markerID;
 * 
 *     double networkUsage;
 *     double managerNetworkUsage;
 * 
 *     int eventNum;
 *     int operatorType[100];
 *     bool reMarkerMessage;
 * 
 *     int time;
 *     int vehicleID;
 *     double speed;
 *     string laneID;
 * }
 * </pre>
 */
class EventPacket : public ::omnetpp::cPacket
{
  protected:
    bool placementMessage;
    Placement placement;
    NodeMessage fognode;
    int monitorID;
    bool monitorMessage;
    bool monitorFlag;
    int monitorH;
    bool used;
    ::omnetpp::opp_string destAddrs;
    int srcAddr;
    int destAddr;
    int port;
    int appNum;
    int hopCount;
    bool markerMessage;
    double sendTime;
    double queueTime;
    double queueBeginTime;
    double transmissionTime;
    double transmissionBeginTime;
    double processTime;
    int markerID;
    double networkUsage;
    double managerNetworkUsage;
    int eventNum;
    int operatorType[100];
    bool reMarkerMessage;
    int time;
    int vehicleID;
    double speed;
    ::omnetpp::opp_string laneID;

  private:
    void copy(const EventPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EventPacket&);

  public:
    EventPacket(const char *name=nullptr, short kind=0);
    EventPacket(const EventPacket& other);
    virtual ~EventPacket();
    EventPacket& operator=(const EventPacket& other);
    virtual EventPacket *dup() const override {return new EventPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual bool getPlacementMessage() const;
    virtual void setPlacementMessage(bool placementMessage);
    virtual Placement& getPlacement();
    virtual const Placement& getPlacement() const {return const_cast<EventPacket*>(this)->getPlacement();}
    virtual void setPlacement(const Placement& placement);
    virtual NodeMessage& getFognode();
    virtual const NodeMessage& getFognode() const {return const_cast<EventPacket*>(this)->getFognode();}
    virtual void setFognode(const NodeMessage& fognode);
    virtual int getMonitorID() const;
    virtual void setMonitorID(int monitorID);
    virtual bool getMonitorMessage() const;
    virtual void setMonitorMessage(bool monitorMessage);
    virtual bool getMonitorFlag() const;
    virtual void setMonitorFlag(bool monitorFlag);
    virtual int getMonitorH() const;
    virtual void setMonitorH(int monitorH);
    virtual bool getUsed() const;
    virtual void setUsed(bool used);
    virtual const char * getDestAddrs() const;
    virtual void setDestAddrs(const char * destAddrs);
    virtual int getSrcAddr() const;
    virtual void setSrcAddr(int srcAddr);
    virtual int getDestAddr() const;
    virtual void setDestAddr(int destAddr);
    virtual int getPort() const;
    virtual void setPort(int port);
    virtual int getAppNum() const;
    virtual void setAppNum(int appNum);
    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);
    virtual bool getMarkerMessage() const;
    virtual void setMarkerMessage(bool markerMessage);
    virtual double getSendTime() const;
    virtual void setSendTime(double sendTime);
    virtual double getQueueTime() const;
    virtual void setQueueTime(double queueTime);
    virtual double getQueueBeginTime() const;
    virtual void setQueueBeginTime(double queueBeginTime);
    virtual double getTransmissionTime() const;
    virtual void setTransmissionTime(double transmissionTime);
    virtual double getTransmissionBeginTime() const;
    virtual void setTransmissionBeginTime(double transmissionBeginTime);
    virtual double getProcessTime() const;
    virtual void setProcessTime(double processTime);
    virtual int getMarkerID() const;
    virtual void setMarkerID(int markerID);
    virtual double getNetworkUsage() const;
    virtual void setNetworkUsage(double networkUsage);
    virtual double getManagerNetworkUsage() const;
    virtual void setManagerNetworkUsage(double managerNetworkUsage);
    virtual int getEventNum() const;
    virtual void setEventNum(int eventNum);
    virtual unsigned int getOperatorTypeArraySize() const;
    virtual int getOperatorType(unsigned int k) const;
    virtual void setOperatorType(unsigned int k, int operatorType);
    virtual bool getReMarkerMessage() const;
    virtual void setReMarkerMessage(bool reMarkerMessage);
    virtual int getTime() const;
    virtual void setTime(int time);
    virtual int getVehicleID() const;
    virtual void setVehicleID(int vehicleID);
    virtual double getSpeed() const;
    virtual void setSpeed(double speed);
    virtual const char * getLaneID() const;
    virtual void setLaneID(const char * laneID);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EventPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EventPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef __EVENTPACKET_M_H

